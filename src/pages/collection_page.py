import json
import pandas as pd
import streamlit as st
from typing import Dict, List, Any

from src.utils.constants import BUILDS_FILE, BASE_URL
from src.utils.helpers import calculate_table_height
from src.pages.calculator_page import (
    load_artifacts,
    df_from_encoded_build,
    calc_summary_df,
    assemble_metrics_df,
    style_metrics_html,
)


def _load_builds_by_slots() -> Dict[int, List[Dict[str, Any]]]:
    """
    –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á–∏ –∫ int; –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    """
    if not BUILDS_FILE.exists():
        st.warning(f"–§–∞–π–ª —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –±–∏–ª–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {BUILDS_FILE.as_posix()}")
        return {}

    try:
        raw: Dict[str, List[Dict[str, Any]]] = json.loads(BUILDS_FILE.read_text(encoding="utf-8"))
        return {int(k): v for k, v in raw.items()}
    except Exception as exc:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å {BUILDS_FILE.name}: {exc}")
        return {}


def _render_build_tab(build: Dict[str, Any], art_data: Dict[str, Dict[str, Dict[str, float]]]) -> None:
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–¥–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –≤–∏—Ç—Ä–∏–Ω—ã.
    """
    try:
        df: pd.DataFrame = df_from_encoded_build(build["encoded"])
    except Exception as exc:
        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–¥ {build.get('id', 'WTF???')}: {exc}")
        return

    st.markdown(
        "<div style='text-align: right; font-size: 14px; color: gray;'>"
        f"üìé –ò—Å—Ç–æ—á–Ω–∏–∫: {build.get('author', '‚Äî')}  "
        "</div><br>",
        unsafe_allow_html=True
    )

    _, left_col, right_col, _ = st.columns([0.6, 1, 1, 0.6], gap="large")

    with left_col:
        st.data_editor(
            df,
            hide_index=True,
            use_container_width=True,
            key=f"build_editor_{build['id']}",
            height=calculate_table_height(df),
            column_config={
                "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç": st.column_config.TextColumn("–ê—Ä—Ç–µ—Ñ–∞–∫—Ç", disabled=True),
                "–¢–∏—Ä": st.column_config.NumberColumn("–¢–∏—Ä", disabled=True),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": st.column_config.NumberColumn("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", disabled=True),
            },
        )

    with right_col:
        summary = calc_summary_df(df, art_data)
        df_metrics = assemble_metrics_df(summary, df, art_data)
        st.markdown(style_metrics_html(df_metrics), unsafe_allow_html=True)

    st.markdown("<div style='height:8px'></div>", unsafe_allow_html=True)

    calc_url = f"{BASE_URL}?build={build['encoded']}"
    placeholder = st.empty()
    _, left_btn, right_btn, _ = st.columns([0.6, 1, 1, 0.6], gap="small")

    with left_btn:
        if st.button("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", key=f"share_{build['id']}", use_container_width=True):
            full_url = calc_url
            placeholder.success("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç –õ–∞–∫–µ—è")
            placeholder.code(full_url, language="markdown", wrap_lines=True)

    with right_btn:
        st.link_button(
            label="üßÆ –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ",
            url=calc_url,
            type="secondary",
            use_container_width=True,
        )


def collection_page() -> None:
    st.subheader("üßæ –ö–æ–ª–ª–µ–∫—Ü–∏—è –õ–∞–∫–µ—è")

    with st.expander("‚ú® –ù–µ–º–Ω–æ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, –ø–∞—Ä–∞ —É–¥–∞—á–Ω—ã—Ö –Ω–∞—Ö–æ–¥–æ–∫ –∏ —â–µ–ø–æ—Ç–∫–∞ –±–µ–∑—É–º–∏—è", expanded=False):
        st.markdown("""        
        üß∑ *–¢—ã –Ω–∞ –æ—Å–æ–±–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –≥–¥–µ –õ–∞–∫–µ–π —Ö—Ä–∞–Ω–∏—Ç –±–∏–ª–¥—ã.*  
        –ù–µ —Å–ø—Ä–∞—à–∏–≤–∞–π, –∑–∞—á–µ–º –µ–º—É —Å—Ç–æ–ª—å–∫–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –µ–≥–æ —Å–ø–æ—Å–æ–± –±–æ—Ä–æ—Ç—å—Å—è —Å —ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∫—Ä–∏–∑–∏—Å–æ–º. –ò–ª–∏ –æ–Ω –ø—Ä–æ—Å—Ç–æ –Ω–µ —É–º–µ–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ö–∞–æ—Å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏.
        
        ---
        
        - ‚úÖ –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å —Å–±–æ—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫—Ç–æ-—Ç–æ –∫–æ–≥–¥–∞-—Ç–æ —Å–¥–µ–ª–∞–ª, –ø—Ä–æ–≤–µ—Ä–∏–ª –∏ —Ä–µ—à–∏–ª: *¬´–û–≥–æ, –∞ —ç—Ç–æ –≤–µ–¥—å –Ω–µ–ø–ª–æ—Ö–æ!¬ª*
        
        - üé≤ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∏–ª–¥—ã –ø–æ–ª—É—á–∏–ª–∏—Å—å —Å–ª—É—á–∞–π–Ω–æ, –¥—Ä—É–≥–∏–µ ‚Äî —Å—Ç–∞–ª–∏ –∏—Ç–æ–≥–æ–º –≥–ª—É–±–æ–∫–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.  
          –ù–æ –≤—Å–µ –æ–Ω–∏ –∑–¥–µ—Å—å, –ø–æ—Ç–æ–º—É —á—Ç–æ **–∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è**.
        
        - üìé –ú–Ω–æ–≥–∏–µ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–±–æ—Ä–æ–∫ —Ä–æ–¥–æ–º –∏–∑ Discord-–∫–∞–Ω–∞–ª–∞ **FURY**, —á—Ç–æ —É—é—Ç–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–ª—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ **NH5**.  
          –°–ø–∞—Å–∏–±–æ, Sakura, –∑–∞ —Ç–æ, —á—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —ç—Ç–∏ –±–∏–ª–¥—ã, –Ω–æ –∏ —Å–∞–º–∞ –≤–Ω–µ—Å–ª–∞ –≤ –Ω–∏—Ö —Å–º—ã—Å–ª –∏ –≤–Ω–∏–º–∞–Ω–∏–µ ‚Äî –±–µ–∑ —Ç–µ–±—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –±—ã–ª–∞ –±—ã –ø—É—Å—Ç–æ–π. –¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞.

        ---

        ü§ù –ê –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ –∫–∞–∫–æ–π-—Ç–æ —Å–±–æ—Ä–∫–µ —Ç—ã —É–∑–Ω–∞–µ—à—å —Å–µ–±—è ‚Äî –Ω–µ —É–¥–∏–≤–ª—è–π—Å—è.  
        –° —Ö–æ—Ä–æ—à–∏–º–∏ –±–∏–ª–¥–∞–º–∏ –≤—Å–µ–≥–¥–∞ —Ç–∞–∫: **—Å–º–æ—Ç—Ä–∏—à—å –Ω–∞ –Ω–∏—Ö, –∞ –æ–Ω–∏ —Å–º–æ—Ç—Ä—è—Ç –≤ –æ—Ç–≤–µ—Ç.**
        """)

    st.divider()

    builds_by_slots = _load_builds_by_slots()
    if not builds_by_slots:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –±–∏–ª–¥–æ–≤. –ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ!")
        return

    slot_options = sorted(builds_by_slots)
    slots_sel = st.selectbox(
        "üî¢ –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤",
        options=slot_options,
        format_func=lambda x: f"{x} —à—Ç.",
    )

    builds = builds_by_slots.get(slots_sel, [])
    if not builds:
        st.warning("–ù–µ—Ç –±–∏–ª–¥–æ–≤ —Å —Ç–∞–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.")
        return

    tab_titles = [b.get("id", f"Build {i + 1}") for i, b in enumerate(builds)]
    tabs = st.tabs(tab_titles)

    art_data = load_artifacts()

    for tab, build in zip(tabs, builds):
        with tab:
            _render_build_tab(build, art_data)
